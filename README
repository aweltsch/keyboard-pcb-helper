# Keyboard PCB Layout Helper
A tool to create pcbs from [keyboard layout editor](http://www.keyboard-layout-editor.com/) configurations.

# Set up
You need to have Python 3 and KiCAD installed on your system.
```
python -m venv venv --system-site-packages # this is needed to have pcbnew available
source venv/bin/activate
pip install skidl pykicad kigadgets networkx
# git clone https://github.com/keebio/Keebio-Parts.pretty
# TODO: somehow migrate the components to the new format
# the components contain .lib files whereas kicad now uses kicad_sym s-expressions
# git clone https://github.com/keebio/keebio-components keebio-components.kicad_sym
```

TODO: kicad setup

# Usage
TODO!
Make sure that you have the virtual environment activated, if not do so via `source venv/bin/activate`.

1. Download the keyboard layout as json file from the keyboard-layout-editor website to a file, e.g. keyboard-layout.json.
2. Run the generate-netlist script: `python generate-netlist.py keyboard-layout.json`
This will create two new files

3.
4. Start KiCAD, create a new project and import the netlist generate in step 3.
5.


# Autorouting idea
A keyboard PCB is a somehow simpler version of more general PCBs
The placement has alrady been fixed by design beforehand (kle)
There are usually "just" different nets for rows & columns which are close and
usually well-aligned via physical placement. The underlying topology is close to a grid
Most imporatantly wee need to make sure that different nets don't cross and the connection to
the microcontroller can successfully be routed

# Autorouting TODO
- [ ] Find a way to conventiently iterate through footprints & keep out areas
- [ ] plot the grid graph
- [ ] generate the segments & vias fromthe graph
- [ ] make sure pads and segments intersect properly

Use kibot to check design rules, ..., and to generate the gerber files.
https://github.com/INTI-CMNB/kibot
